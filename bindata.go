// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x96\x41\x6f\xda\x30\x14\xc7\xef\x7c\x8a\xa7\x5c\x76\x69\xb4\xb4\x54\x95\x56\x69\x07\x04\x59\x85\x54\xd1\xa9\x30\xed\x30\x4d\xc8\xd8\x0f\xe2\x41\x6c\xcb\x76\x55\x58\xc5\x77\x9f\x93\x30\x4a\x3a\xd0\x08\x35\xa9\x2a\x71\x89\xcc\x7b\x8e\xf1\xff\xe7\xf7\xfe\xf1\x53\x03\x20\xc0\x39\x49\xd5\x0c\x4d\x70\xfd\xc3\xfd\x04\x78\xca\x9f\x2e\x21\x48\x8a\xc1\x75\xd0\x52\x0a\x05\x03\x46\x2c\x01\x2b\x81\x08\x90\xa3\x5f\x48\x6d\x70\xf6\x77\x22\x51\xdc\xcd\x33\xcd\xe7\x88\xb1\xa8\xd6\x0b\x6e\x2e\x9a\x67\x19\x1a\xaa\xb9\xb2\x5c\x0a\xf7\x5e\x5b\x23\xb1\xb8\x65\xdd\x7c\x2e\xce\x95\x8b\x21\x1b\x6a\x34\x4a\x0a\x83\x43\x2a\x59\xb6\xad\x8b\x28\x2a\xcf\x54\xc4\x26\x2e\xfe\x71\x8a\x8b\xf3\x72\x46\x13\x31\xc9\x5e\x29\x47\x33\x41\x2e\xf8\xa5\x7b\xdf\x1f\x94\x33\x29\xda\x44\x32\x97\xfb\xfa\xed\x45\x26\x41\xc2\x50\x3b\x65\x9b\x7a\x96\xeb\xf1\xf2\x6c\x1f\xc1\xff\x05\xea\x5d\xf8\x68\x61\xd1\x7c\x0e\xcf\xc3\xad\x04\xfa\x71\xfb\xae\xd7\xa9\x15\x41\x3b\x41\x3a\x05\x9b\x10\xeb\x1e\x58\xa0\x48\x88\x81\x11\xa2\x00\x92\xf3\x41\x56\x73\x21\xec\x00\x70\x13\x1f\x03\x40\x07\x67\xe8\x8a\x3e\x13\x5f\xf1\xf0\x2f\x8f\x29\xb6\x13\xdf\xc6\x83\xb8\x9a\xde\xd5\xe8\x67\x63\x43\xfd\x16\x0f\x99\x2d\x80\x80\x76\xa2\x45\x86\xa0\x16\x27\x81\x47\x6e\x93\xd2\xbf\xca\x31\x5c\x45\x60\x90\x4a\xc1\x8c\x87\xfa\xba\xa8\x80\xfc\xee\xbe\x7b\xd3\xed\xb5\x6e\xa1\xd3\x1a\xb4\x5e\xd5\x6d\x2e\x3e\x0f\x31\xa5\xe1\x5a\x58\xa8\x50\xf3\x7c\x85\xab\x28\xf0\xd3\x97\x2b\x84\x94\x88\x0f\xd6\xf5\x25\xa4\x92\xf1\x31\xdf\xbb\x2b\x2f\xa3\x4f\x5e\xa8\xf5\xe2\xef\xaf\x07\xe6\x11\x03\xcb\x1b\xb7\x6e\x0a\x1e\xdb\xf5\x10\x7f\x7e\x86\xb0\x81\x00\xc8\xd8\xa2\x3e\xa4\x9f\x76\x5b\xd8\x1b\x31\xd9\xc7\xc2\xfa\x4d\xa0\x52\x2d\x8e\xe6\x55\x99\x27\x3a\xd4\x46\x3e\x68\x8a\x30\x7a\xa0\x53\xf4\x71\x23\x68\xbe\x89\x43\x55\xad\xb7\xbe\x2b\x29\x5a\xd4\x9a\x25\x7a\x82\x76\x05\xc0\xf1\x61\x39\xf6\x43\xbe\x94\x7e\xa0\x78\x31\xa0\xdc\xb1\x49\xfa\x3b\xcc\xb4\x84\xc5\x19\x67\x7b\x29\x46\xc3\x42\x6c\xb1\x33\x9f\x97\x0a\xe0\x45\x51\x49\xcd\x27\x5c\x90\x59\xd5\xb2\xda\xdd\xa8\x55\x08\xd6\x6d\x5e\x3b\x31\x94\x4a\xeb\xfd\x42\xd8\xcb\xad\x1e\xf9\xf8\xdf\x7b\x55\x39\x78\xb2\xab\x2d\x70\x4f\x76\x55\xc4\x4f\x76\xf5\x82\xdc\xc9\xae\xbc\xd8\x55\x23\x1b\x2d\x1b\x7f\x02\x00\x00\xff\xff\x4b\xe9\x65\x1b\x7a\x12\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 4730, mode: os.FileMode(420), modTime: time.Unix(1464372518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

